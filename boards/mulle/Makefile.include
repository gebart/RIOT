# define the cpu used by the Mulle board
export CPU = k60
export CPU_MODEL = K60DN512VLL10

export GDBPORT ?= 3333

#define the default port depending on the host OS
OS := $(shell uname)
ifeq ($(OS),Linux)
  PORT ?= /dev/ttyUSB0
else ifeq ($(OS),Darwin)
  PORT ?= $(shell ls -1 /dev/tty.SLAB_USBtoUART* | head -n 1)
endif
# TODO: add support for windows as host platform
ifeq ($(PORT),)
  $(info CAUTION: No terminal port for your host system found!)
endif
export PORT


# define tools used for building the project
export PREFIX ?= arm-none-eabi-
export GDBPREFIX ?= $(PREFIX)
export OPENOCD ?= openocd
export GDB ?= $(GDBPREFIX)gdb
export CC = $(PREFIX)gcc
export CXX = $(PREFIX)g++
export AR = $(PREFIX)ar
export AS = $(PREFIX)as
export LINK = $(PREFIX)gcc
export SIZE = $(PREFIX)size
export OBJCOPY = $(PREFIX)objcopy
export TERMPROG ?= $(RIOTBASE)/dist/tools/pyterm/pyterm
export FLASHER ?= $(OPENOCD)
export DEBUGGER ?= $(GDB)
export DEBUGSERVER ?= $(OPENOCD)
export RESET ?= $(OPENOCD)

# define build specific options
CPU_USAGE = -mcpu=cortex-m4
FPU_USAGE = -mfloat-abi=soft -msoft-float
export CFLAGS += -ggdb -g3 -std=gnu99 -Os -Wall -Wstrict-prototypes -Werror=implicit-function-declaration $(CPU_USAGE) $(FPU_USAGE) -mlittle-endian -mthumb -nostartfiles
export CFLAGS += -ffunction-sections -fdata-sections -fno-builtin
export CXXFLAGS += -ffunction-sections -fdata-sections -fno-builtin
export ASFLAGS += -ggdb -g3 $(CPU_USAGE) $(FPU_USAGE) -mlittle-endian
export LINKFLAGS += -g3 -ggdb -std=gnu99 $(CPU_USAGE) $(FPU_USAGE) -mlittle-endian -static -mthumb -nostartfiles
export LINKFLAGS += -L$(LINKERSCRIPTPATH) -T$(LINKERSCRIPT)
export OFLAGS ?= -O binary

OOCD_BOARD_FLAGS ?= -f $(RIOTBOARD)/$(BOARD)/dist/openocd.conf
ifneq ($(PROGRAMMER_SERIAL),)
  OOCD_BOARD_FLAGS += -c 'ftdi_serial $(PROGRAMMER_SERIAL)'
endif

FFLAGS ?= $(OOCD_BOARD_FLAGS)
FFLAGS += \
    -c 'tcl_port 0' \
    -c 'gdb_port 0' \
    -c 'telnet_port 0' \
    -c 'init' \
    -c 'targets' \
    -c 'reset halt' \
    -c 'flash write_image erase bin/$(BOARD)/$(APPLICATION).elf 0x00000000 elf' \
    -c 'verify_image bin/$(BOARD)/$(APPLICATION).elf' \
    -c 'reset run' \
    -c 'shutdown'

export FFLAGS

DEBUGSERVER_FLAGS ?= $(OOCD_BOARD_FLAGS)
DEBUGSERVER_FLAGS += \
    -c 'tcl_port 0' \
    -c 'gdb_port $(GDBPORT)' \
    -c 'telnet_port 0' \
    -c 'init' \
    -c 'targets' \
    -c 'reset halt'

export DEBUGSERVER_FLAGS

RESET_FLAGS ?= $(OOCD_BOARD_FLAGS)
RESET_FLAGS += \
    -c 'tcl_port 0' \
    -c 'gdb_port 0' \
    -c 'telnet_port 0' \
    -c 'init' \
    -c 'reset run' \
    -c 'shutdown'

export RESET_FLAGS

DEBUGGER_FLAGS ?= -x $(RIOTBOARD)/$(BOARD)/dist/gdb.conf
DEBUGGER_FLAGS += \
    -ex 'tar ext :$(GDBPORT)' \
    $(BINDIR)/$(APPLICATION).elf

export DEBUGGER_FLAGS

export TERMFLAGS += -p "$(PORT)"

# use newLib nano-specs if available
#~ ifeq ($(shell $(LINK) -specs=nano.specs -E - 2>/dev/null >/dev/null </dev/null ; echo $$?),0)
#~ export LINKFLAGS += -specs=nano.specs -lc -lnosys
#~ endif

# export board specific includes to the global includes-listing
export INCLUDES += -I$(RIOTBOARD)/$(BOARD)/include
